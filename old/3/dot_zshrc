
#### FIG ENV VARIABLES ####
# Please make sure this block is at the start of this file.
[ -s ~/.fig/shell/pre.sh ] && source ~/.fig/shell/pre.sh
#### END FIG ENV VARIABLES ####
# zinit start
source "$HOME/.zshrc_zinitcheck"    # check if zinit exists, otherwise download it

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/z-a-rust \
    zdharma-continuum/z-a-as-monitor \
    zdharma-continuum/z-a-patch-dl \
    zdharma-continuum/z-a-bin-gem-node
# zinit end

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export BROWSER=firefox
export EDITOR=nvim
export VISUAL=code

export GPG_TTY=$(tty)

# extra paths
export PATH="$HOME/.bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/.fastlane/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH="$HOME/.deno/bin:$PATH"

export ANDROID_HOME="$HOME/Library/Android/sdk"
export PATH="$PATH:$ANDROID_HOME/emulator"
export PATH="$PATH:$ANDROID_HOME/tools"
export PATH="$PATH:$ANDROID_HOME/tools/bin"
export PATH="$PATH:$ANDROID_HOME/platform-tools"


export RUBYOPT="-W0"


# other
fuck() { # lazy load fuck
    unset -f fuck
    eval $(thefuck --alias)
    fuck "$@"
}

kport() {
    lsof -t -i :$1 | xargs kill
}

srt() {
	~/Source/pvinis/p0lco-shortener/node_modules/.bin/netlify-shortener "$1" "$2"
}

jobdone() {
  say done -v Samantha && unicornleap -s 1.5
}

pearadd() {
	pear known | jq '.[] | "\(.username) - \(.name) - \(.email)"' | fzf | awk '{ print substr($1, 2) }' | xargs pear current:add
}
pearcur() {
	pear current | jq '.[] | "\(.username) - \(.name) - \(.email)"'
}
alias peardel='pear current:clear'
alias peargit='pear amend'
alias pearcopy='pear current:trailer | pbcopy'

alias krn='kport 8081'

alias dockerhere='docker run --rm -it -v $(pwd):/usr/src/project $1'

alias rmf='rm -rf'

alias fixmonitorshit='displayplacer "id:A0E7CA20-2BD5-5E54-3CAC-9FB8238C6731 res:1440x2560 hz:60 color_depth:8 scaling:off origin:(0,0) degree:90" "id:5EB29A81-68C7-A5BD-87DD-7ED2AA7DAD80 res:1440x900 color_depth:4 scaling:on origin:(1440,1772) degree:0" "id:888A2502-306B-FEE9-3AAA-5DBE91CED531 res:1440x2560 hz:59 color_depth:8 scaling:off origin:(-1440,0) degree:90"'
alias che='chezmoi'
alias chepull='che update --apply=false'

alias le='hledger -f ~/Cloud/everywhere/money/cheese.ledger'
alias leui='hledger-ui -f ~/Cloud/everywhere/money/cheese.ledger --watch'
alias leweb='hledger-web -f ~/Cloud/everywhere/money/cheese.ledger'

upgradeall() {
	brew update
	brew upgrade
}

cleanupall() {
	brew cleanup
	yarn cache clean
	rm -rf ~/Library/Developer/Xcode/DerivedData
	rm -rf ~/Library/Developer/CoreSimulator/Caches
	rm -rf ~/.gradle/caches
}


# aliases
alias f='fork'
alias c='code . || code-insiders .'
alias cl='clear'
alias andt='adb shell input keyevent 82'
alias git='hub'
alias oplogin='eval $(op signin my)'
alias oploginartsy='eval $(op signin team_artsy)'
alias zupd='zinit self-update'
alias lsd='ls | lolcat'
alias lg='lazygit'

# modify the prompt to contain git branch name if applicable
git_prompt_info() {
  current_branch=$(git current-branch 2> /dev/null)
  if [[ -n $current_branch ]]; then
    echo " %{$fg_bold[green]%}$current_branch%{$reset_color%}"
  fi
}


# Taken from: https://github.com/pndurette/zsh-lux
# macos_is_dark: check if the dark mode in macOS is active
# * Returns:
# *  0 if dark mode is active
# *  1 if light mode is active
# *  2 if the status of the dark mode can't be determined
#    (i.e. the version of macOS does not support it)

function macos_is_dark() {
    local dark_mode=$(osascript -l JavaScript -e \
        "Application('System Events').appearancePreferences.darkMode.get()")

    # _lux_log "fct: $funcstack[1]" "dark mode? $dark_mode"

    if   [[ "$dark_mode" == "true" ]];  then return 0
    elif [[ "$dark_mode" == "false" ]]; then return 1
    else
        # _lux_log "can't get macOS dark mode status."
        return 2
    fi
}



BASE16_SHELL=$HOME/.config/base16-shell
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
if macos_is_dark; then
	base16_tomorrow-night-eighties
else
	base16_tomorrow
fi

# Allow exported PS1 variable to override default prompt.
if ! env | grep -q '^PS1='; then
  PS1='${SSH_CONNECTION+"%{$fg_bold[green]%}%n@%m:"}%{$fg_bold[blue]%}%c%{$reset_color%}$(git_prompt_info) %# '
fi
PROMPT='%B%F{%(?.green.red)}$(hrr)
%B%F{%(?.green.red)}┌──[%(?.. %?) %b%F{white}%~
%B%F└──>%b%f '

# for ruby-build, to find the brew openssl
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"


# export GIT_EDITOR=nvim

eval "$(direnv hook zsh)"

# history
setopt hist_ignore_all_dups inc_append_history
HISTFILE=~/.zhistory
HISTSIZE=4096
SAVEHIST=4096

zinit load willghatch/zsh-saneopt # some sane options

zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh








autoload bashcompinit
bashcompinit

autoload -Uz compinit
compinit



zinit load zsh-users/zsh-autosuggestions




zinit load zsh-users/zsh-completions



# completion
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi


. $(brew --prefix asdf)/libexec/asdf.sh
# zinit snippet OMZ::plugins/asdf/asdf.plugin.zsh # this stopped working for now. check https://github.com/ohmyzsh/ohmyzsh/issues/10484
. ~/.asdf/plugins/java/set-java-home.zsh

bindkey -v

zinit snippet OMZ::plugins/mosh/mosh.plugin.zsh



zinit load zsh-users/zsh-history-substring-search
bindkey '^[[A' history-substring-search-up   # up arrow
bindkey '^[[B' history-substring-search-down # down arrow

# makes color constants available
autoload -U colors
colors

# enable colored output from ls
export CLICOLOR=1

setopt extendedglob

# unsetopt nomatch

[ -s "$HOME/.zshrc_private" ] && source $HOME/.zshrc_private || true
[ -s "$HOME/.zshrc_local" ] && source $HOME/.zshrc_local || true





[ -s ~/.fig/fig.sh ] && source ~/.fig/fig.sh


autoload -U edit-command-line
zle -N edit-command-line
bindkey '^x^x' edit-command-line


# blog about this
TRAPUSR1() {
    echo "USR1() called!!"
}

